{"version":3,"sources":["components/NavBar/styles.module.css","components/GoogleSearchMap/styles.module.css","components/Pages/Home/styles.module.css","components/Button/styles.module.css","components/MapContainer/styles.module.css","components/Button/Button.js","components/NavBar/NavBar.js","components/MapContainer/MapContainer.js","components/GoogleSearchMap/GoogleSearchMap.js","components/Pages/Home/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","nav-bar","title","link","google-search-map","search-box","button","home","maps-container","map-container","Button","_ref","label","props","Object","objectWithoutProperties","react_default","a","createElement","assign","className","styles","NavBar","onClick","buttonFunctionality","GoogleApiWrapper","apiKey","process","LoadingContainer","google","dist","initialCenter","lat","lng","center","style","width","height","zoom","GoogleSearchComponent","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","Geocode","setApiKey","state","location","search","bind","assertThisInitialized","onInput","_this2","fromAddress","then","response","_response$results$0$g","results","geometry","setState","error","console","evt","target","value","components_MapContainer_MapContainer","type","placeholder","onChange","React","Component","Home","mapQuantity","addMap","log","prevState","components_NavBar_NavBar","GoogleSearchMap","toConsumableArray","Array","map","e","i","key","concat","App","BrowserRouter","Switch","Route","exact","path","component","GoogleMapsSearch","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a661957a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav-bar\":\"styles_nav-bar__1shyT\",\"title\":\"styles_title__2hKKq\",\"link\":\"styles_link__2DCIv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"google-search-map\":\"styles_google-search-map__1ocMK\",\"search-box\":\"styles_search-box__1U7_r\",\"button\":\"styles_button__2n2Sp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"home\":\"styles_home__3ygih\",\"maps-container\":\"styles_maps-container__1GYzC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"styles_button__2JFtb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"map-container\":\"styles_map-container__88vcu\"};","import React from \"react\";\n\nimport styles from \"./styles.module.css\";\n\nexport default ({ label, ...props }) => (\n  <button className={styles[\"button\"]} {...props}>\n    {label}\n  </button>\n);\n","import React from \"react\";\nimport styles from \"./styles.module.css\";\nimport Button from \"../Button/Button\";\n\nconst NavBar = (props) => (\n  <div className={styles[\"nav-bar\"]}>\n    <label className={styles[\"title\"]}>Google Maps Search App </label>\n    <Button\n      label={\"Add Map\"}\n      className={styles[\"link\"]}\n      onClick={props.buttonFunctionality}\n    />\n  </div>\n);\n\n\nexport default NavBar;\n","import React from \"react\";\nimport { GoogleApiWrapper, Map } from \"google-maps-react\";\nimport styles from './styles.module.css';\n\nconst MapContainer = (props) => {\n  const { google } = props;\n  return (\n    <Map\n      className={styles['map-container']}\n      google={google}\n      initialCenter={{\n        lat: 52.520008,\n        lng: 13.404954\n      }}\n      center={{\n        lat: props.lat,\n        lng: props.lng\n      }}\n      style={{\n        width: '300px',\n        height: '300px'\n      }}\n      zoom={10}\n    >\n    </Map>\n  );\n};\n\nconst LoadingContainer = () => (\n  <div>Loading Map...</div>\n);\n\nexport default GoogleApiWrapper({\n  apiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n  LoadingContainer: LoadingContainer\n})(MapContainer);\n","import React from \"react\";\nimport Geocode from \"react-geocode\";\nimport MapComponent from \"../MapContainer/MapContainer\";\nimport Button from \"../Button/Button\";\nimport styles from \"./styles.module.css\";\n\n\nclass GoogleSearchComponent extends React.Component {\n  constructor() {\n    super();\n    Geocode.setApiKey(process.env.REACT_APP_GOOGLE_MAPS_API_KEY);\n    this.state = {\n      lat: 52.520008,\n      lng: 13.404954,\n      location: null\n    };\n    this.search = this.search.bind(this);\n    this.onInput = this.onInput.bind(this);\n  }\n\n  search() {\n    Geocode.fromAddress(this.state.location).then(\n      response => {\n        const { lat, lng } = response.results[0].geometry.location;\n        this.setState({\n          lat: lat,\n          lng: lng\n        })\n      },\n      error => {\n        console.error(error);\n      }\n    );\n  }\n\n  onInput(evt) {\n    this.setState({\n      location: evt.target.value\n    })\n  }\n\n  render() {\n    return (\n      <div className={styles[\"google-search-map\"]}>\n        <MapComponent lat={this.state.lat} lng={this.state.lng}/>\n        <input\n          type=\"text\"\n          placeholder=\"Where do you want to go?\"\n          className={styles[\"search-box\"]}\n          onChange={this.onInput}\n        />\n        <Button className={styles[\"button\"]} onClick={this.search} label={\"Search\"}/>\n\n      </div>\n    )\n  };\n}\n\nexport default GoogleSearchComponent;\n","import React from \"react\";\nimport NavBar from \"../../NavBar/NavBar\";\nimport GoogleSearchMap from \"../../GoogleSearchMap/GoogleSearchMap\";\nimport styles from './styles.module.css';\n\nexport default class Home extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      mapQuantity: 0\n    };\n    this.addMap = this.addMap.bind(this);\n  }\n\n  addMap() {\n    console.log(this.state.mapQuantity)\n    this.setState(prevState => {\n      return { mapQuantity: prevState.mapQuantity + 1 }\n    });\n  }\n\n  render() {\n    return (\n      <div className={styles['home']}>\n        <NavBar buttonFunctionality={this.addMap}/>\n        <div className={styles['maps-container']}>\n          <GoogleSearchMap/>\n          {\n            [...Array(this.state.mapQuantity)].map((e, i) => {\n              return <GoogleSearchMap key={`map-${i}`}/>\n            })\n          }\n        </div>\n      </div>\n    )\n  };\n}\n\n\n","import React, { Component } from \"react\";\nimport { Switch, Route } from \"react-router\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport GoogleMapsSearch from \"./components/Pages/Home\";\n\nclass App extends Component {\n  render() {\n    return (\n        <BrowserRouter>\n          <Switch>\n            <Route exact path=\"/\" component={GoogleMapsSearch}/>\n          </Switch>\n        </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}